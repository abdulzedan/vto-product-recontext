name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Create virtual environment
      run: |
        python -m venv .venv
        source .venv/bin/activate
        echo "VIRTUAL_ENV=$VIRTUAL_ENV" >> $GITHUB_ENV
        echo "$VIRTUAL_ENV/bin" >> $GITHUB_PATH

    - name: Install dependencies
      run: |
        source .venv/bin/activate
        pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Set environment variables for tests
      run: |
        echo "PROJECT_ID=test-project" >> $GITHUB_ENV
        echo "GOOGLE_CLOUD_STORAGE=test-bucket" >> $GITHUB_ENV
        echo "GEMINI_API_KEY=test-key" >> $GITHUB_ENV

    - name: Run tests with coverage
      run: |
        source .venv/bin/activate
        python -m pytest \
          tests/test_exceptions.py \
          tests/test_config.py::TestProcessingConfig \
          tests/test_config.py::TestGoogleCloudConfig \
          tests/test_config.py::TestGeminiConfig \
          tests/test_config.py::TestStorageConfig \
          tests/test_config.py::TestLoggingConfig \
          tests/test_utils.py::TestUniqueIdGeneration \
          tests/test_utils.py::TestUrlValidation \
          tests/test_utils.py::TestDirectoryOperations \
          tests/test_utils.py::TestImageEncoding \
          --cov=src \
          --cov-report=term-missing \
          --cov-report=xml \
          --cov-fail-under=15 \
          -v

    - name: Upload coverage reports to Codecov
      if: success()
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
      env:
        CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}